openapi: 3.0.0
info:
  title: Pizza Ordering API
  description: API for ordering pizzas
  version: 1.0.0

servers:
  - url: https://api.example.com/v1

paths:
  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request

  /auth/login:
    post:
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCredentials'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /pizzas:
    get:
      summary: Get a list of available pizzas
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pizza'

  /orders:
    post:
      summary: Create a new order
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized

  /orders/{orderId}:
    get:
      summary: Get an order
      security:
        - bearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          description: Unauthorized
        '404':
          description: Order not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    UserRegistration:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string

    UserCredentials:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        email:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string

    Pizza:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number

    OrderRequest:
      type: object
      properties:
        pizzas:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        customer:
          $ref: '#/components/schemas/Customer'

    OrderItem:
      type: object
      properties:
        id:
          type: integer
        quantity:
          type: integer

    Customer:
      type: object
      properties:
        name:
          type: string
        address:
          type: string

    Order:
      type: object
      properties:
        id:
          type: integer
        pizzas:
          type: array
          items:
            $ref: '#/components/schemas/OrderedPizza'
        customer:
          $ref: '#/components/schemas/Customer'
        total:
          type: number
        status:
          type: string
          enum: [Pending, Preparing, Ready, Delivered]

    OrderedPizza:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        quantity:
          type: integer
